import { useEffect, useState } from "react";
import axios from "axios";
import { Product, NewProduct } from "../../types/types";
  
const DashboardProducts = () => {
  
  const [products, setProducts] = useState<Product[]>([]);
  const [newProduct, setNewProduct] = useState<NewProduct>({
    name: "",
    description: "",
    price: 0,
    category_id: 0,
    image_url: ""
  });
  

  const [error, setError] = useState<string>("");
  useEffect(() => {
    const token = sessionStorage.getItem("token");
    if (!token) return;
  
    axios.get<Product[]>("/api/products", {
      headers: { Authorization: `Bearer ${token}` },
    })
    .then(response => {
      setProducts(response.data);
    })
    .catch(error => {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏.");
    });
  }, []);
  

  const handleAddProduct = async () => {
    try {
      const token = sessionStorage.getItem("token");
      if (!token) return;
  
      const response = await axios.post<Product>("/api/products", newProduct, {
        headers: { Authorization: `Bearer ${token}` }
      });
  
      setProducts([...products, response.data]); // üëà —Å—é–¥–∏ –º–∏ –¥–æ–¥–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ –∑ id
      setNewProduct({  
                    name: "",
                    description: "",
                    price: 0,
                    category_id: 0,
                    image_url: "" });
    } catch (error) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä.");
    }
  };
  

  const handleDeleteProduct = async (id: number) => {
    try {
      const token = sessionStorage.getItem("token");
      if (!token) return;

      await axios.delete(`/api/products/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      setProducts(products.filter(product => product.id !== id));
    } catch (error) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä.");
    }
  };

  return (
    <div>
      <h1>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏</h1>
      {error && <p className="text-red-500">{error}</p>}

      <input
        type="text"
        value={newProduct.name}
        onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
        placeholder="–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É"
      />

      <input
        type="text"
        value={newProduct.description}
        onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
        placeholder="–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É"
       />

      <input
        type="number"
        value={newProduct.price}
        onChange={(e) => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) })}
        placeholder="–¶—ñ–Ω–∞"
       />

      <input
        type="number"
        value={newProduct.category_id}
        onChange={(e) => setNewProduct({ ...newProduct, category_id: parseInt(e.target.value) })}
        placeholder="ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
      />

      <input
        type="text"
        value={newProduct.image_url}
        onChange={(e) => setNewProduct({ ...newProduct, image_url: e.target.value })}
        placeholder="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
       />

      <button onClick={handleAddProduct}>–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä</button>
      <ul>
        {products.map(product => (
            <li key={product.id} className="mb-4">
            <p><strong>–ù–∞–∑–≤–∞:</strong> {product.name}</p>
            <p><strong>–û–ø–∏—Å:</strong> {product.description}</p>
            <p><strong>–¶—ñ–Ω–∞:</strong> {product.price}</p>
            <p><strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ID:</strong> {product.category_id}</p>
            <p><strong>–ö–∞—Ä—Ç–∏–Ω–∫–∞:</strong> <a href={product.image_url} target="_blank" rel="noopener noreferrer">{product.image_url}</a></p>
            <p><strong>–°—Ç–≤–æ—Ä–µ–Ω–æ:</strong> {new Date(product.created_at).toLocaleString()}</p>
            <p><strong>–û–Ω–æ–≤–ª–µ–Ω–æ:</strong> {new Date(product.updated_at).toLocaleString()}</p>
            <button onClick={() => handleDeleteProduct(product.id)} className="mt-2 text-red-600">–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </li>
        ))}
     </ul>

    </div>
  );
};

export default DashboardProducts;
